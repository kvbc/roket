{"searchDocs":[{"title":"Network Event","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_event","content":"Network Event ...","keywords":"","version":"Next"},{"title":"üå± Contributing","type":0,"sectionRef":"#","url":"/roket/docs/contributing","content":"üå± Contributing ...","keywords":"","version":"Next"},{"title":"üß† Best Practices","type":0,"sectionRef":"#","url":"/roket/docs/best_practices","content":"üß† Best Practices ...","keywords":"","version":"Next"},{"title":"Middleware","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/middleware","content":"Middleware ...","keywords":"","version":"Next"},{"title":"üôã FAQ","type":0,"sectionRef":"#","url":"/roket/docs/faq","content":"üôã FAQ ...","keywords":"","version":"Next"},{"title":"üöÄ Getting Started","type":0,"sectionRef":"#","url":"/roket/docs/getting_started","content":"üöÄ Getting Started ...","keywords":"","version":"Next"},{"title":"Network Property","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_property","content":"Network Property ...","keywords":"","version":"Next"},{"title":"üß™ Examples","type":0,"sectionRef":"#","url":"/roket/docs/examples","content":"üß™ Examples ...","keywords":"","version":"Next"},{"title":"üìñ About","type":0,"sectionRef":"#","url":"/roket/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Features‚Äã","type":1,"pageTitle":"üìñ About","url":"/roket/docs/intro#features","content":" ...  ","version":"Next","tagName":"h2"},{"title":"Planned‚Äã","type":1,"pageTitle":"üìñ About","url":"/roket/docs/intro#planned","content":" Below is AI stuff but it covers pretty much everything I'd ever want for this framework (i think)  Timeouts &amp; RetriesRegex Subscriptions? (like Player(HP|MaxHP)Changed)Event Filtering? (deliver event only to those that meet requirements, like is VIP or has certain level or cash, auth hooks)Delta-Compression - Send only changed fields instead of the full table/object each tick.Prioritized Sync - Critical properties update every frame (or :Set()); less‚Äëcritical ones less often.Snapshot &amp; Interpolation of propertiesArea‚Äëof‚ÄëInterest (AOI) Filtering - Automatically only send updates about things near the player.Streamed Asset Loading - Tie network sync into Roblox‚Äôs streaming service so you don‚Äôt update objects that haven‚Äôt streamed in yet.Rate Limiting &amp; Flood Protection - Throttle clients that fire events too quickly to prevent DDOS/exploits.Built‚ÄëIn Profiler - Track round‚Äëtrip times, bandwidth per-remote, calls per-second, etc., surfaced in an in‚Äëgame debug UI.Bandwidth Budgeting - Set per-player or global limits and receive warnings when you exceed them.Plugin API?Client Prediction &amp; Reconciliation - Let clients predict movement/animations locally and reconcile when the server corrects them.Authoritative Server Logic - Helpers for ‚Äúoptimistic‚Äù client calls that get rolled back if the server disagrees.Rollback Networking - For fast‚Äëpaced games (fighters, racing), rewind/re‚Äësimulate inputs to resolve conflicts fairly. (here maybe kinda the same as snapshot and then rollback)Pluggable Codecs - Swap in JSON, MessagePack, Protobuf, or custom bit‚Äëpacked formats.Optional Encryption - Encrypt particularly sensitive payloads (e.g. for anti‚Äëcheat) over the wire.Latency / Packet‚ÄëLoss Simulation - Inject arbitrary delay, drop rates or jitter locally so you can test how clients cope under poor network conditions.Record &amp; Replay - Capture a sequence of client‚Üîserver interactions in a real session, then replay them deterministically for debugging.Load‚ÄëTesting Harness - Simulate hundreds or thousands of clients firing events and calls to measure your server‚Äôs throughput and bottlenecks.Multicast / Group Calls - Invoke a function on a specific subset of clients (e.g. team A) with one call.Error‚ÄëReporting Integration - Auto‚Äëcatch thrown errors in server handlers and forward stack‚Äëtraces to a remote DataStore/third‚Äëparty (e.g. Sentry‚Äëstyle) for post‚Äëmortem.Transaction / Unit‚ÄëOf‚ÄëWork API - Let clients bundle multiple calls/properties into one atomic ‚Äúcommit‚Äù with rollback on failure. ","version":"Next","tagName":"h2"},{"title":"Network Function","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_function","content":"","keywords":"","version":"Next"},{"title":"Examples‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Server Authority‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#server-authority","content":" -- @ServerStorage/RoketScripts/MathService local Roket = require(game.ReplicatedStorage.Packages.Roket) local MathService = { CalcDelta = Roket.NetFunction &quot;MathService.CalcDelta&quot;, } function MathService.RoketStart() --#server MathService.CalcDelta:Define(function(resolveClient, player, a, b, c) local delta = b*b - 4*a*c if player then -- return to client after 2 seconds print(`Calculating delta for {player.Name} with {a}, {b}, and {c}`) task.wait(2) resolveClient(delta, 619) end return delta, 420 -- return to server immediately end) task.wait(2) local a, b, c = 6, 1, 9 local delta, other = MathService.CalcDelta(a, b, c) print(`Server delta is {delta} ({other})`) --#client local a, b, c = 7, 1, 10 print(&quot;Waiting for delta calculation ...&quot;) task.wait(5) print(&quot;That's enough! I want my delta!&quot;) MathService.CalcDelta(a, b, c):andThen(function(delta, other) print(`My delta is {delta} ({other})`) end) --#end end return MathService   ","version":"Next","tagName":"h3"},{"title":"Client Authority‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#client-authority","content":" -- @ServerStorage/RoketScripts/SpyService local Roket = require(game.ReplicatedStorage.Packages.Roket) local SpyService = { GetClientData = Roket.NetFunction &quot;SpyService.GetClientData&quot; } function SpyService.RoketStart() --#client SpyService.GetClientData:Define(function(resolveServer, player, what) if what == 'age' then return resolveServer(9000) elseif what == 'name' then return resolveServer('Mark') end end) local age = SpyService.GetClientData:CallLocal('age') print(`My age is {age} :)`) --#server task.wait(5) local firstPlayer = game.Players:GetPlayers()[1] :: Player SpyService.GetClientData(firstPlayer, 'age'):andThen(function(age) print(`Age of {firstPlayer.Name} is {age}`) end) task.wait(5) SpyService.GetClientData(game.Players, 'name'):andThen(function(names) print(&quot;Names of all players are&quot;, names) end) --#end end return SpyService   ","version":"Next","tagName":"h3"},{"title":"Two-Way Communication‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#two-way-communication","content":" -- @ServerStorage/RoketScripts/PingPongService local Roket = require(game.ReplicatedStorage.Packages.Roket) local PingPongService = { PingPong = Roket.NetFunction &quot;PingPong&quot; } function PingPongService.RoketStart() --#server PingPongService.PingPong:Define(function(resolveClient, player, what) if player and what == 'ping' then resolveClient('pong') end end) task.wait(3) -- wait a little for players to load PingPongService.PingPong(game.Players, 'pong'):andThen(print) --#client PingPongService.PingPong:Define(function(resolveServer, player, what) if what == 'pong' then resolveServer('ping') end end) task.wait(5) PingPongService.PingPong('ping'):andThen(print) --#end end return PingPongService   ","version":"Next","tagName":"h3"},{"title":"Shared Definition‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#shared-definition","content":" -- @ServerStorage/RoketScripts/SharedService local Roket = require(game.ReplicatedStorage.Packages.Roket) local SharedService = { Func = Roket.NetFunction &quot;SharedService.Func&quot; } function SharedService.RoketStart() SharedService.Func:Define(function(resolve, player: Player?, ...) print(&quot;both do this! and have player&quot;, player.Name) if Roket.IsClient() then print(&quot;but client also prints this&quot;) else print(&quot;and server this&quot;) end resolve(&quot;both return same thing&quot;) end) task.wait(5) --#server SharedService.Func(game.Players):andThen(function(result) warn(&quot;Server got:&quot;, result) end) --#client SharedService.Func():andThen(function(result) warn(&quot;Client got:&quot;, result) end) --#end end return SharedService   ","version":"Next","tagName":"h3"},{"title":"OOP‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#oop","content":" ...  ","version":"Next","tagName":"h3"},{"title":"Multiple Files‚Äã","type":1,"pageTitle":"Network Function","url":"/roket/docs/core_concepts/network_function#multiple-files","content":" ... ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}