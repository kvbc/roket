"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64],{96304:e=>{e.exports=JSON.parse('{"functions":[{"name":"Call","desc":"Call a raw function with specified middleware and arguments\\n\\n#### Examples\\n\\n```lua\\n--!strict\\n--!optimize 2\\n\\n-- type PrintSomethingArgs = { Message: string }\\n-- type PrintSomethingRet = {}\\n\\nlocal function printSometing(args: PrintSomethingArgs): PrintSomethingRet\\n\\tprint(args.Message)\\n\\treturn {}\\nend\\n\\nlocal loggerMiddleware: Middleware.Middleware<PrintSomethingArgs, PrintSomethingRet> = function(args)\\n\\targs.Message = \\"[LOG]: \\" .. args.Message\\n\\treturn {\\n\\t\\tnext = args\\n\\t}\\nend\\n\\nMiddleware.Call(printSometing, loggerMiddleware, { Message = \\"Hello\\" })\\n```","params":[{"name":"rawFunction","desc":"","lua_type":"(TArgs) -> TRes"},{"name":"middlewares","desc":"","lua_type":"Middlewares<TArgs, TRes>"},{"name":"args","desc":"","lua_type":"TArgs\\n"}],"returns":[{"desc":"","lua_type":"TRes\\n"}],"function_type":"static","source":{"line":119,"path":"src/roket/module/Middleware.luau"}},{"name":"Wrap","desc":"Wrap a raw function to always be called with the specified middleware(s)\\n\\n#### Examples\\n\\n```lua\\n-- ...\\n\\nlocal printNew = Middleware.Wrap(printSometing, loggerMiddleware)\\n\\nprintNew { Message = \\"Wassup\\" }\\n```","params":[{"name":"rawFunction","desc":"","lua_type":"(TArgs) -> TRes"},{"name":"middlewares","desc":"","lua_type":"Middlewares<TArgs, TRes>\\n"}],"returns":[{"desc":"","lua_type":"(TArgs) -> TRes\\n"}],"function_type":"static","source":{"line":147,"path":"src/roket/module/Middleware.luau"}},{"name":"SelfCallMethod","desc":"Call\\n\\n#### Examples\\n\\n```lua\\nfunction Car:Build(args: { Colors: string }) \\n\\treturn Middleware.SelfCallMethod(self, \'Build\', args, function(args)\\n\\t\\tprint(`Building my car of color {args.Colors}`)\\n\\t\\treturn \'abc\'\\n\\tend)\\nend\\n```","params":[{"name":"self","desc":"","lua_type":"Self"},{"name":"methodName","desc":"","lua_type":"string"},{"name":"args","desc":"","lua_type":"TArgs"},{"name":"rawMethod","desc":"","lua_type":"Method<TArgs, TRes>"}],"returns":[{"desc":"","lua_type":"TRes\\n"}],"function_type":"static","source":{"line":181,"path":"src/roket/module/Middleware.luau"}},{"name":"SelfLoad","desc":"Load specified middlewares into `self`\\n\\n#### Examples\\n\\n```lua\\nlocal Car = {}\\n\\nfunction Car.New()\\n\\tlocal self = {}\\n\\n\\tMiddleware.SelfLoad(self, { Start = print })\\n\\n\\treturn self\\nend\\n\\n-- function Car.Start() ... end\\n\\nreturn Car\\n```","params":[{"name":"self","desc":"","lua_type":"{[any]: any}"},{"name":"middlewares","desc":"","lua_type":"KeyedMiddlewares"}],"returns":[],"function_type":"static","source":{"line":207,"path":"src/roket/module/Middleware.luau"}},{"name":"SelfWrap","desc":"Wrap a raw function to always be called with middleware(s) attached to specific key in `self`\\n\\nUseful when creating higher-order functions such as in the example(s) below\\n\\n#### Examples\\n\\n```lua\\nlocal Car = {}\\n\\nfunction Car.New()\\n\\tlocal self = {}\\n\\n\\tMiddleware.SelfLoad(self, { Listen = print })\\n\\n\\treturn self\\nend\\n\\nfunction Car:Listen(listener)\\n\\tlistener = Middleware.SelfWrap(self, listener, \'Listen\')\\n\\t-- ...\\nend\\n\\nreturn Car\\n```","params":[{"name":"self","desc":"","lua_type":"Self"},{"name":"rawFunction","desc":"","lua_type":"(TArgs) -> TRes"},{"name":"middlewaresKey","desc":"","lua_type":"string\\n"}],"returns":[{"desc":"","lua_type":"(TArgs) -> TRes\\n"}],"function_type":"static","source":{"line":237,"path":"src/roket/module/Middleware.luau"}},{"name":"SelfGetKey","desc":"Get specified middlewares from `self`\\n\\n#### Examples\\n\\n```lua\\nlocal Car = {}\\n\\nfunction Car.New()\\n\\tlocal self = {}\\n\\n\\tMiddleware.SelfLoad(self, { Thing = warn })\\n\\n\\tlocal middlewares = Middleware.SelfGetKey(self, \\"Thing\\")\\n\\tprint(middlewares) -- warn\\n\\n\\treturn self\\nend\\n\\nreturn Car\\n```","params":[{"name":"self","desc":"","lua_type":"Self"},{"name":"middlewaresKey","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Middlewares<TArgs, TRes>?\\n"}],"function_type":"static","source":{"line":270,"path":"src/roket/module/Middleware.luau"}},{"name":"SelfGet","desc":"Get middlewares from `self`\\n\\n#### Examples\\n\\n```lua\\nlocal Car = {}\\n\\nfunction Car.New()\\n\\tlocal self = {}\\n\\n\\tMiddleware.SelfLoad(self, { Thing = warn })\\n\\n\\tlocal middlewares = Middleware.SelfGet(self)\\n\\tprint(middlewares) -- { \\"Thing\\": warn }\\n\\n\\treturn self\\nend\\n\\nreturn Car\\n```","params":[{"name":"self","desc":"","lua_type":"Self"}],"returns":[{"desc":"","lua_type":"KeyedMiddlewares\\n"}],"function_type":"static","source":{"line":297,"path":"src/roket/module/Middleware.luau"}},{"name":"CallMethod","desc":"Call a raw method with specified middleware and arguments","params":[{"name":"self","desc":"","lua_type":"Self"},{"name":"rawMethod","desc":"","lua_type":"Method<TArgs, TRes>"},{"name":"middlewares","desc":"","lua_type":"Middlewares<MethodArgs<TArgs>, TRes>"},{"name":"args","desc":"","lua_type":"TArgs\\n"}],"returns":[{"desc":"","lua_type":"TRes\\n"}],"function_type":"static","source":{"line":316,"path":"src/roket/module/Middleware.luau"}},{"name":"WrapMethod","desc":"Wrap a method to always be called with midleware(s) attached to specific key in `self`","params":[{"name":"object","desc":"","lua_type":"{[any]: any}"},{"name":"methodName","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":333,"path":"src/roket/module/Middleware.luau"}}],"properties":[],"types":[{"name":"MiddlewareArgs<TArgs>","desc":"","lua_type":"TArgs & { [string]: any }","source":{"line":36,"path":"src/roket/module/Middleware.luau"}},{"name":"MiddlewareResult<TRes,TArgs>","desc":"","lua_type":"TRes & { next: MiddlewareArgs<TArgs>?, [string]: any }","source":{"line":43,"path":"src/roket/module/Middleware.luau"}},{"name":"Middleware<TArgs,TRes>","desc":"","lua_type":"(MiddlewareArgs<TArgs>) -> MiddlewareResult<TRes, TArgs>","source":{"line":51,"path":"src/roket/module/Middleware.luau"}},{"name":"Middlewares<TArgs,TRes>","desc":"","lua_type":"Middleware<TArgs,TRes> | { Middleware<TArgs;TRes> }","source":{"line":56,"path":"src/roket/module/Middleware.luau"}},{"name":"KeyedMiddlewares","desc":"","lua_type":"{[string]: Middlewares<any;any>}","source":{"line":61,"path":"src/roket/module/Middleware.luau"}}],"name":"Middleware","desc":"Middleware singleton utility","source":{"line":9,"path":"src/roket/module/Middleware.luau"}}')}}]);