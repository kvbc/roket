"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{7879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"intro","title":"\ud83d\udcd6 About","description":"Roblox game framework built to skyroket your developer experience!","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/roket/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/kvbc/roket/edit/main/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"\ud83d\ude80 Getting Started","permalink":"/roket/docs/getting_started"}}');var i=n(4848),o=n(8453);const s={sidebar_position:1},l="\ud83d\udcd6 About",a={},c=[{value:"Features",id:"features",level:2},{value:"Planned",id:"planned",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"-about",children:"\ud83d\udcd6 About"})}),"\n",(0,i.jsx)(t.p,{children:"Roblox game framework built to skyroket your developer experience!"}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(t.p,{children:"..."}),"\n",(0,i.jsx)(t.h2,{id:"planned",children:"Planned"}),"\n",(0,i.jsx)(t.p,{children:"Below is AI stuff but it covers pretty much everything I'd ever want for this framework (i think)"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Timeouts & Retries"}),"\n",(0,i.jsxs)(t.li,{children:["Regex Subscriptions? (like ",(0,i.jsx)(t.code,{children:"Player(HP|MaxHP)Changed"}),")"]}),"\n",(0,i.jsx)(t.li,{children:"Event Filtering? (deliver event only to those that meet requirements, like is VIP or has certain level or cash, auth hooks)"}),"\n",(0,i.jsx)(t.li,{children:"Delta-Compression - Send only changed fields instead of the full table/object each tick."}),"\n",(0,i.jsxs)(t.li,{children:["Prioritized Sync - Critical properties update every frame (or :",(0,i.jsx)(t.code,{children:"Set()"}),"); less\u2011critical ones less often."]}),"\n",(0,i.jsx)(t.li,{children:"Snapshot & Interpolation of properties"}),"\n",(0,i.jsx)(t.li,{children:"Area\u2011of\u2011Interest (AOI) Filtering - Automatically only send updates about things near the player."}),"\n",(0,i.jsx)(t.li,{children:"Streamed Asset Loading - Tie network sync into Roblox\u2019s streaming service so you don\u2019t update objects that haven\u2019t streamed in yet."}),"\n",(0,i.jsx)(t.li,{children:"Rate Limiting & Flood Protection - Throttle clients that fire events too quickly to prevent DDOS/exploits."}),"\n",(0,i.jsx)(t.li,{children:"Built\u2011In Profiler - Track round\u2011trip times, bandwidth per-remote, calls per-second, etc., surfaced in an in\u2011game debug UI."}),"\n",(0,i.jsx)(t.li,{children:"Bandwidth Budgeting - Set per-player or global limits and receive warnings when you exceed them."}),"\n",(0,i.jsx)(t.li,{children:"Plugin API?"}),"\n",(0,i.jsx)(t.li,{children:"Client Prediction & Reconciliation - Let clients predict movement/animations locally and reconcile when the server corrects them."}),"\n",(0,i.jsx)(t.li,{children:"Authoritative Server Logic - Helpers for \u201coptimistic\u201d client calls that get rolled back if the server disagrees."}),"\n",(0,i.jsx)(t.li,{children:"Rollback Networking - For fast\u2011paced games (fighters, racing), rewind/re\u2011simulate inputs to resolve conflicts fairly. (here maybe kinda the same as snapshot and then rollback)"}),"\n",(0,i.jsx)(t.li,{children:"Pluggable Codecs - Swap in JSON, MessagePack, Protobuf, or custom bit\u2011packed formats."}),"\n",(0,i.jsx)(t.li,{children:"Optional Encryption - Encrypt particularly sensitive payloads (e.g. for anti\u2011cheat) over the wire."}),"\n",(0,i.jsx)(t.li,{children:"Latency / Packet\u2011Loss Simulation - Inject arbitrary delay, drop rates or jitter locally so you can test how clients cope under poor network conditions."}),"\n",(0,i.jsx)(t.li,{children:"Record & Replay - Capture a sequence of client\u2194server interactions in a real session, then replay them deterministically for debugging."}),"\n",(0,i.jsx)(t.li,{children:"Load\u2011Testing Harness - Simulate hundreds or thousands of clients firing events and calls to measure your server\u2019s throughput and bottlenecks."}),"\n",(0,i.jsx)(t.li,{children:"Multicast / Group Calls - Invoke a function on a specific subset of clients (e.g. team A) with one call."}),"\n",(0,i.jsx)(t.li,{children:"Error\u2011Reporting Integration - Auto\u2011catch thrown errors in server handlers and forward stack\u2011traces to a remote DataStore/third\u2011party (e.g. Sentry\u2011style) for post\u2011mortem."}),"\n",(0,i.jsx)(t.li,{children:"Transaction / Unit\u2011Of\u2011Work API - Let clients bundle multiple calls/properties into one atomic \u201ccommit\u201d with rollback on failure."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);