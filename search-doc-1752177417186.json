{"searchDocs":[{"title":"🧠 Best Practices","type":0,"sectionRef":"#","url":"/roket/docs/best_practices","content":"","keywords":"","version":"Next"},{"title":"Error Handling​","type":1,"pageTitle":"🧠 Best Practices","url":"/roket/docs/best_practices#error-handling","content":" ","version":"Next","tagName":"h2"},{"title":"Promises​","type":1,"pageTitle":"🧠 Best Practices","url":"/roket/docs/best_practices#promises","content":"","version":"Next","tagName":"h2"},{"title":"🌱 Contributing","type":0,"sectionRef":"#","url":"/roket/docs/contributing","content":"🌱 Contributing ...","keywords":"","version":"Next"},{"title":"🔗 Groups","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/group","content":"🔗 Groups so this allows to group many objects that have id on them and just call multiple all at once so like watch multiple net properties or net events.","keywords":"","version":"Next"},{"title":"🧬 Middlewares","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/middleware","content":"🧬 Middlewares ...","keywords":"","version":"Next"},{"title":"NetEvent","type":0,"sectionRef":"#","url":"/roket/api/NetEvent","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent#functions","content":" ","version":null,"tagName":"h2"},{"title":"Load​","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent#Load","content":"&lt;/&gt; NetEvent.Load(optionsOrId: LoadOptions&lt;TArgs&gt; | string) → NetEvent ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent#LoadOptions","content":"interface LoadOptions { Id: string Unreliable: boolean Middlewares: { Fire: Middlewares, Listen: Middlewares } }  Load a Roket network event Read more on the docs.  ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent#Fire","content":"&lt;/&gt; NetEvent.Fire( self: NetEventInternals&lt;TArgs&gt;, args: NetEvent_Fire_Args&lt;TArgs&gt; ) → NetEvent_Fire_Ret Fire a network event  ","version":null,"tagName":"h3"},{"title":"Listen​","type":1,"pageTitle":"NetEvent","url":"/roket/api/NetEvent#Listen","content":"&lt;/&gt; NetEvent.Listen( self: NetEvent, rawListener: (args: NetEvent_Listen_Args&lt;TArgs&gt;) → () ) → RBXScriptConnection  Listen to a network event ","version":null,"tagName":"h3"},{"title":"Middleware","type":0,"sectionRef":"#","url":"/roket/api/Middleware","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#types","content":" ","version":null,"tagName":"h2"},{"title":"MiddlewareArgs<TArgs>​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#MiddlewareArgs<TArgs>","content":"&lt;/&gt; type MiddlewareArgs&lt;TArgs&gt; = TArgs &amp; {[string]: any}   ","version":null,"tagName":"h3"},{"title":"MiddlewareResult<TRes,TArgs>​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#MiddlewareResult<TRes,TArgs>","content":"&lt;/&gt; type MiddlewareResult&lt;TRes,TArgs&gt; = TRes &amp; { next: MiddlewareArgs&lt;TArgs&gt;?, [string]: any }   ","version":null,"tagName":"h3"},{"title":"Middleware<TArgs,TRes>​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#Middleware<TArgs,TRes>","content":"&lt;/&gt; type Middleware&lt;TArgs,TRes&gt; = (MiddlewareArgs&lt;TArgs&gt;) → MiddlewareResult&lt;TRes,TArgs&gt;   ","version":null,"tagName":"h3"},{"title":"Middlewares<TArgs,TRes>​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#Middlewares<TArgs,TRes>","content":"&lt;/&gt; type Middlewares&lt;TArgs,TRes&gt; = Middleware&lt;TArgs,TRes&gt; | {Middleware&lt;TArgs;TRes&gt;}  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#functions","content":" ","version":null,"tagName":"h2"},{"title":"Call​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#Call","content":"&lt;/&gt; Middleware.Call( handler: MiddlewareHandler&lt;TArgs,TRes&gt;, middlewares: Middlewares&lt;TArgs,TRes&gt;, args: MiddlewareArgs&lt;TArgs&gt; ) → TRes Call a raw function with specified middleware and arguments Examples --!strict --!optimize 2 -- type PrintSomethingArgs = { Message: string } -- type PrintSomethingRet = {} local function printSometing(args: PrintSomethingArgs): PrintSomethingRet print(args.Message) return {} end local loggerMiddleware: Middleware.Middleware&lt;PrintSomethingArgs, PrintSomethingRet&gt; = function(args) args.Message = &quot;[INFO]: &quot; .. args.Message return { next = args } end Middleware.Call(printSometing, loggerMiddleware, { Message = &quot;Hello&quot; })   ","version":null,"tagName":"h3"},{"title":"Wrap​","type":1,"pageTitle":"Middleware","url":"/roket/api/Middleware#Wrap","content":"&lt;/&gt; Middleware.Wrap( handler: MiddlewareHandler&lt;TArgs,TRes&gt;, middlewares: Middlewares&lt;TArgs,TRes&gt; ) → (MiddlewareArgs&lt;TArgs&gt;) → TRes Wrap a raw function to always be called with the specified middleware(s) Examples -- ... local printNew = Middleware.Wrap(printSometing, loggerMiddleware) printNew { Message = &quot;Wassup&quot; }  ","version":null,"tagName":"h3"},{"title":"⚡ Network Events","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_event/","content":"","keywords":"","version":"Next"},{"title":"About​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#about","content":" ...  ","version":"Next","tagName":"h2"},{"title":"Middleware​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#middleware","content":" ","version":"Next","tagName":"h2"},{"title":"Timeout & Retry​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#timeout--retry","content":" ","version":"Next","tagName":"h3"},{"title":"Rate Limiting & Flood Protection​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#rate-limiting--flood-protection","content":" DDoS protect  also includes Bandwidth Budgeting (Set per-player or global limits and receive warnings when you exceed them.)  ","version":"Next","tagName":"h3"},{"title":"AOI (Area‑of‑Interest) Filtering​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#aoi-areaofinterest-filtering","content":" ","version":"Next","tagName":"h3"},{"title":"Client Prediction & Reconciliation (Rollback)​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#client-prediction--reconciliation-rollback","content":" Let clients predict movement/animations locally and reconcile when the server corrects them.  ","version":"Next","tagName":"h3"},{"title":"Codecs​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#codecs","content":" Swap in JSON, MessagePack, Protobuf, or custom bit‑packed formats.  ","version":"Next","tagName":"h3"},{"title":"OOP​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#oop","content":" Maybe also something that preserves the metatable index so u can literally pass in any OOP object with metatable and it will reconstruct on the other side  ","version":"Next","tagName":"h3"},{"title":"Latency Simulation​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#latency-simulation","content":" Inject arbitrary delay, drop rates or jitter locally so you can test how clients cope under poor network conditions  ","version":"Next","tagName":"h3"},{"title":"Profiler​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#profiler","content":" Built‑In Profiler - Track round‑trip times, bandwidth per-remote, calls per-second, etc., surfaced in an in‑game debug UI.  ","version":"Next","tagName":"h3"},{"title":"Interpolation​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#interpolation","content":" ","version":"Next","tagName":"h3"},{"title":"Type Validation​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#type-validation","content":" zod-like middleware  ","version":"Next","tagName":"h3"},{"title":"Batching​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#batching","content":" ","version":"Next","tagName":"h3"},{"title":"API​","type":1,"pageTitle":"⚡ Network Events","url":"/roket/docs/core_concepts/network_event/#api","content":"","version":"Next","tagName":"h2"},{"title":"🌐 Scopes","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/scopes","content":"🌐 Scopes server / client / shared","keywords":"","version":"Next"},{"title":"🏷️ Network Properties","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_event/network_property","content":"","keywords":"","version":"Next"},{"title":"About​","type":1,"pageTitle":"🏷️ Network Properties","url":"/roket/docs/core_concepts/network_event/network_property#about","content":" ...  ","version":"Next","tagName":"h2"},{"title":"Middleware​","type":1,"pageTitle":"🏷️ Network Properties","url":"/roket/docs/core_concepts/network_event/network_property#middleware","content":" ","version":"Next","tagName":"h2"},{"title":"DataStore​","type":1,"pageTitle":"🏷️ Network Properties","url":"/roket/docs/core_concepts/network_event/network_property#datastore","content":" ","version":"Next","tagName":"h3"},{"title":"Snapshot​","type":1,"pageTitle":"🏷️ Network Properties","url":"/roket/docs/core_concepts/network_event/network_property#snapshot","content":" ","version":"Next","tagName":"h3"},{"title":"API​","type":1,"pageTitle":"🏷️ Network Properties","url":"/roket/docs/core_concepts/network_event/network_property#api","content":"","version":"Next","tagName":"h2"},{"title":"⏳ Transactions","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/transaction","content":"","keywords":"","version":"Next"},{"title":"Middleware​","type":1,"pageTitle":"⏳ Transactions","url":"/roket/docs/core_concepts/transaction#middleware","content":" ","version":"Next","tagName":"h2"},{"title":"Record & Replay​","type":1,"pageTitle":"⏳ Transactions","url":"/roket/docs/core_concepts/transaction#record--replay","content":" also rollback maybe or something ","version":"Next","tagName":"h3"},{"title":"NetFunction","type":0,"sectionRef":"#","url":"/roket/api/NetFunction","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#functions","content":" ","version":null,"tagName":"h2"},{"title":"Load​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#Load","content":"&lt;/&gt; NetFunction.Load(optionsOrId: LoadOptions | string) → NetFunction ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#LoadOptions","content":"interface LoadOptions { id: string-- the unique idenitifier }  Load a Roket NetFunction Read more on the docs.  ","version":null,"tagName":"h3"},{"title":"Define​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#Define","content":"&lt;/&gt; NetFunction:Define(rawFunction: ( resolve: (...any) → ...any, player: Player? , ...any ) → ...any) → () Define the function on the client, the server, or both In the passed function, the player is nil only when the function is being called locally by the server. Examples See Examples in the docs. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction##","content":"Type\tDescriptionALREADY_DEFINED\tThe function has already been defined by the runtime  ","version":null,"tagName":"h3"},{"title":"CallLocal​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#CallLocal","content":"&lt;/&gt; NetFunction:CallLocal(...: any) → ...any Call the raw defined function locally. Can only be called on the client. If you meant to locally call the function on the server, just call the function without passing the first &quot;player(s)&quot; arg myFunction(&quot;my data&quot;) ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction##","content":"Type\tDescriptionNOT_CLIENT\tThe function didn't get called on the client  ","version":null,"tagName":"h3"},{"title":"NetFunction()​","type":1,"pageTitle":"NetFunction","url":"/roket/api/NetFunction#__call","content":"&lt;/&gt; NetFunction( any_orServerPlayerOrPlayers: Player | {Player } | Players | any, ...: any ) → ...any | Promise&lt;...any&gt; | Promise&lt;{[Player ]: {...any}}&gt; Calls the NetFunction either remotely or locally. Remotely being from the Client to the Server or from the Server to the Client(s) Locally being ran client-side if executed on the Client or ran server-side if executed on the Server When calling the function locally, actual return values are returned instead of a Promise. When calling the function remotely, a Promise is returned, containing either the actual return values (if the call was targeted towards a single entity - that is either from Client to Server or from Server to specific Client) or a map of Player -&gt; {...rets} if the call was targeted to multiple entities (that is from Server to multiple Clients). Below is a cheatsheet illustrating when a function is being called remotely or locally, and what are it's return values for any given call. Cheatsheet --#server func(...) -- local call, returns ...rets func(player, ...) -- remote call to specific client, returns Promise&lt;...rets&gt; func([plr1, plr2], ...)-- remote call to specific clients, returns Promise&lt;{[Player]: {...rets}}&gt; func(game.Players, ...)-- remote call to all clients, returns Promise&lt;{[Player]: {...rets}}&gt; --#client func(...) -- remote call to the server, returns Promise&lt;...rets&gt; func:CallLocal(...) -- local call, returns ...rets Examples local MathService = { Add = Roket.NetFunction &quot;Add&quot; } function MathService.RoketStart() --#server MathService.Add:Define(function(resolve, player, a, b) resolve(a + b) end) --#client task.wait(3) MathService.Add(3, 5):andThen(print) --#end end return MathService See more Examples in the docs. ","version":null,"tagName":"h3"},{"title":"⚙️ Services","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/services","content":"⚙️ Services persistent modules basically local MathService = Roket.Service &quot;MathService&quot; { data = 13 } function MathService.RoketStart() MathService.data = 50 end function MathService.GetData() local data = MathService.data MathService.data += 1 return data end return MathService talk about differences to normal require","keywords":"","version":"Next"},{"title":"🧪 Examples","type":0,"sectionRef":"#","url":"/roket/docs/examples","content":"🧪 Examples ...","keywords":"","version":"Next"},{"title":"🚀 Getting Started","type":0,"sectionRef":"#","url":"/roket/docs/getting_started","content":"","keywords":"","version":"Next"},{"title":"Plugin​","type":1,"pageTitle":"🚀 Getting Started","url":"/roket/docs/getting_started#plugin","content":"","version":"Next","tagName":"h2"},{"title":"🙋 FAQ","type":0,"sectionRef":"#","url":"/roket/docs/faq","content":"🙋 FAQ ...","keywords":"","version":"Next"},{"title":"📖 About","type":0,"sectionRef":"#","url":"/roket/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"📖 About","url":"/roket/docs/intro#features","content":" ...  ","version":"Next","tagName":"h2"},{"title":"Philosophy​","type":1,"pageTitle":"📖 About","url":"/roket/docs/intro#philosophy","content":" Composition over inheritence - as you can see with the whole middleware system and whole project structure.  ","version":"Next","tagName":"h2"},{"title":"Planned Features​","type":1,"pageTitle":"📖 About","url":"/roket/docs/intro#planned-features","content":" Delta-Compression - Send only changed fields instead of the full table/object each tick. - this should be default in NetProperty - TODOPlugin API? or maybe just middlewares?Queue NetEvent server call to player(s?) so that they dont miss the eventmaybe provide support for some other libs to wrap and speed up Roketmake services not reload everytime they are required but persist in store    Below is AI stuff but it covers pretty much everything I'd ever want for this framework (i think)  Snapshot &amp; Interpolation of properties middlewaresBuilt‑In Profiler - Track round‑trip times, bandwidth per-remote, calls per-second, etc., surfaced in an in‑game debug UI. NetEvent middlewareLatency / Packet‑Loss Simulation - Inject arbitrary delay, drop rates or jitter locally so you can test how clients cope under poor network conditions. NetEvent middlewareRecord &amp; Replay - Capture a sequence of client↔server interactions in a real session, then replay them deterministically for debugging. - thats a huge undertaking that could work with Transaction and rollback of NetEventTransaction / Unit‑Of‑Work API - Let clients bundle multiple calls/properties into one atomic “commit” with rollback on failure. - ye i think thats good, not even roblox batching can sometimes saves lots of calls transactionRegex Subscriptions? (like Player(HP|MaxHP)Changed) object groupPluggable Codecs - Swap in JSON, MessagePack, Protobuf, or custom bit‑packed formats. NetEvent middlewareTimeouts &amp; Retries NetEvent middlewareEvent Filtering? (deliver event only to those that meet requirements, like is VIP or has certain level or cash, auth hooks) user middlewarePrioritized Sync - Critical properties update every frame (or :Set()); less‑critical ones less often. NetEvent middleware for rate limitingArea‑of‑Interest (AOI) Filtering - Automatically only send updates about things near the player. NetEvent middleware for AOIRate Limiting &amp; Flood Protection - Throttle clients that fire events too quickly to prevent DDOS/exploits. stated above as NetEvent middlewareBandwidth Budgeting - Set per-player or global limits and receive warnings when you exceed them. rate limitingClient Prediction &amp; Reconciliation - Let clients predict movement/animations locally and reconcile when the server corrects them. NetEvent middlewareAuthoritative Server Logic - Helpers for “optimistic” client calls that get rolled back if the server disagrees. same as aboveRollback Networking - For fast‑paced games (fighters, racing), rewind/re‑simulate inputs to resolve conflicts fairly. (here maybe kinda the same as snapshot and then rollback) same as aboveOptional Encryption - Encrypt particularly sensitive payloads (e.g. for anti‑cheat) over the wire. not really needed i think ","version":"Next","tagName":"h2"},{"title":"🧩 Network Functions","type":0,"sectionRef":"#","url":"/roket/docs/core_concepts/network_event/network_function","content":"","keywords":"","version":"Next"},{"title":"About​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#about","content":" ...  ","version":"Next","tagName":"h2"},{"title":"Load​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#load","content":" ","version":"Next","tagName":"h2"},{"title":"Calling the function remotely over the network​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#calling-the-function-remotely-over-the-network","content":" On the client-side, in order to call a server-sided function, simply call your loaded NetFunction object.   local myFunc = Roket.NetFunction &quot;myfunc&quot; myFunc(...)   In order to obtain the results of this asynchronous call, you must utilize the returned promise created by Roket.   myFunc(...):andThen(function(...) print(...) end)   note Roket is using a Promise implementation roblox-lua-promisecreated by evaera. Read more on Promises.  For the client it means to call a server function and await its results with a promiseFor the server it means to either call a specific client  To call a function locally  On the server, call it as you would a normal function, e.g. myFunction(...)On the client, use the :CallLocal() method, e.g. myFunction:CallLocal(...)  When calling the function locally, actual return values are returned instead of a promise  ","version":"Next","tagName":"h3"},{"title":"Define​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#define","content":" ","version":"Next","tagName":"h2"},{"title":"Call​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#call","content":" ","version":"Next","tagName":"h2"},{"title":"Middleware​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#middleware","content":" ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Server Authority​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#server-authority","content":" -- @ServerStorage/RoketScripts/MathService local Roket = require(game.ReplicatedStorage.Packages.Roket) local MathService = { CalcDelta = Roket.NetFunction &quot;MathService.CalcDelta&quot;, } function MathService.RoketStart() --#server MathService.CalcDelta:Define(function(resolveClient, player, a, b, c) local delta = b*b - 4*a*c if player then -- return to client after 2 seconds print(`Calculating delta for {player.Name} with {a}, {b}, and {c}`) task.wait(2) resolveClient(delta, 619) end return delta, 420 -- return to server immediately end) task.wait(2) local a, b, c = 6, 1, 9 local delta, other = MathService.CalcDelta(a, b, c) print(`Server delta is {delta} ({other})`) --#client local a, b, c = 7, 1, 10 print(&quot;Waiting for delta calculation ...&quot;) task.wait(5) print(&quot;That's enough! I want my delta!&quot;) MathService.CalcDelta(a, b, c):andThen(function(delta, other) print(`My delta is {delta} ({other})`) end) --#end end return MathService   ","version":"Next","tagName":"h3"},{"title":"Client Authority​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#client-authority","content":" -- @ServerStorage/RoketScripts/SpyService local Roket = require(game.ReplicatedStorage.Packages.Roket) local SpyService = { GetClientData = Roket.NetFunction &quot;SpyService.GetClientData&quot; } function SpyService.RoketStart() --#client SpyService.GetClientData:Define(function(resolveServer, player, what) if what == 'age' then return resolveServer(9000) elseif what == 'name' then return resolveServer('Mark') end end) local age = SpyService.GetClientData:CallLocal('age') print(`My age is {age} :)`) --#server task.wait(5) local firstPlayer = game.Players:GetPlayers()[1] :: Player SpyService.GetClientData(firstPlayer, 'age'):andThen(function(age) print(`Age of {firstPlayer.Name} is {age}`) end) task.wait(5) SpyService.GetClientData(game.Players, 'name'):andThen(function(names) print(&quot;Names of all players are&quot;, names) end) --#end end return SpyService   ","version":"Next","tagName":"h3"},{"title":"Two-Way Communication​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#two-way-communication","content":" -- @ServerStorage/RoketScripts/PingPongService local Roket = require(game.ReplicatedStorage.Packages.Roket) local PingPongService = { PingPong = Roket.NetFunction &quot;PingPong&quot; } function PingPongService.RoketStart() --#server PingPongService.PingPong:Define(function(resolveClient, player, what) if player and what == 'ping' then resolveClient('pong') end end) task.wait(3) -- wait a little for players to load PingPongService.PingPong(game.Players, 'pong'):andThen(print) --#client PingPongService.PingPong:Define(function(resolveServer, player, what) if what == 'pong' then resolveServer('ping') end end) task.wait(5) PingPongService.PingPong('ping'):andThen(print) --#end end return PingPongService   ","version":"Next","tagName":"h3"},{"title":"Shared Definition​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#shared-definition","content":" -- @ServerStorage/RoketScripts/SharedService local Roket = require(game.ReplicatedStorage.Packages.Roket) local SharedService = { Func = Roket.NetFunction &quot;SharedService.Func&quot; } function SharedService.RoketStart() SharedService.Func:Define(function(resolve, player: Player?, ...) print(&quot;both do this! and have player&quot;, player.Name) if Roket.IsClient() then print(&quot;but client also prints this&quot;) else print(&quot;and server this&quot;) end resolve(&quot;both return same thing&quot;) end) task.wait(5) --#server SharedService.Func(game.Players):andThen(function(result) warn(&quot;Server got:&quot;, result) end) --#client SharedService.Func():andThen(function(result) warn(&quot;Client got:&quot;, result) end) --#end end return SharedService   ","version":"Next","tagName":"h3"},{"title":"OOP​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#oop","content":" ...  ","version":"Next","tagName":"h3"},{"title":"Multiple Files​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#multiple-files","content":" ...  ","version":"Next","tagName":"h3"},{"title":"API​","type":1,"pageTitle":"🧩 Network Functions","url":"/roket/docs/core_concepts/network_event/network_function#api","content":" See API. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}